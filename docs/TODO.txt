Todo for Milestone 4
======================
[ ] Adopt a coding standard for c++ source
    - http://llvm.org/docs/CodingStandards.html
      o This is really nice one. Especially since already using llvm. Minor
        annoyance with this one is that it likes to CamelCase variables with
        capital first letter...
    - Investigate others
    [ ] Put info on the website
[ ] Generate source code documentation
[ ] Implement unit tests for the compiler itself (boost test)
[✓] Remove boost dependency
    use llvm equivalent classes. Less dependencies, simpler build
[✓] create proper bootstrap and make scripts
[ ] Implement build bot on the lightbasic.com
    [ ] Update local copy whenever github repo is updated
    [ ] Run the compiler unit tests.
        [ ] Show results on the site
    [ ] Compile the source.
        [ ] Show results on the site
    [ ] Run the success and fail tests.
        [ ] Show results on the site
    [ ] Make preparations for hosting nightly builds (cross compile)
        [ ] osx
        [ ] windows
        [✓] ubuntu
[ ] Implement proper error messages
    [ ] Lexer    - invalid characters, invalid numbers, ...
    [ ] Parser   - missing braces, mismatching keywords, unbalanced scopes, ...
    [ ] Semantic - type errors, undeclared variables, ...
    [ ] misc     - missing files, invalid input, ...
[ ] Implement sub/function pointers
[ ] assignment expressions outside function bodies
[ ] Implement DO ... LOOP construct
    [ ] DO ... LOOP
    [ ] DO UNTIL expr ... LOOP
    [ ] DO WHILE expr ... LOOP
    [ ] DO ... LOOP UNTIL expr
    [ ] DO ... LOOP WHILE expr
[ ] Implement EXIT keyword
    [ ] EXIT
    [ ] EXIT DO
    [ ] EXIT FOR
[ ] Implement CONTINUE keyword
    [ ] CONTINUE
    [ ] CONTINUE DO 
    [ ] CONTINUE FOR
[ ] Improve FOR
    [ ] Support negative STEP (decrement)
    [ ] Optimize for simple cases
        [ ] increment / decrement constant STEP expression


Future. M5 ?
==============
[ ] Implement Expression parser
    [ ] Addition
    [ ] Subtraction
    [ ] Multiplication
    [ ] Division
    [ ] Modulus
    [ ] Logical And
    [ ] Logical Or
    [ ] Not
    [ ] Xor
    [ ] POW ^
    [ ] Bitwise And &
    [ ] Bitwise Or |
    [ ] Comparisons
    [ ] add pointer indexing. 0 based
        Dim argv As Byte Ptr Ptr
        Dim arg As Byte Ptr
        arg = argv[1]
[ ] Add char type
    Need to think about this and figure it out how it should work,
    what's its underlying datatype, character encoding, etc... 
    Have a look at Go
    [ ] string literals should be of type Char Ptr
    [ ] allow character literals in tildes
        Dim a As Char = `A` ' 65
    [ ] allow assigning integer literals to Char type
    [ ] allow assigning array of integer values to Char array
        Dim hello As Char[] = [72, 101, 108, 108, 111, 0]


===============================================================================

Todo for Milestone 3
======================
[✓] Add Any Ptr
[✓] Add Null
[✓] initialize upon declaration
    Dim i As Integer = 10
[✓] add Var that deducts the type from right hand expression
    Var i = 10
[✓] Add For
    For i = 0 to 10 [ step Expression ]
        StmtList
    Next
[✓] make parenthesis optional for FuncStmt
    printf "hello %s\n", "world"
[✓] Improve the type system
[✓] Support building for 32bit and 64bit
[✓] Move internal type conversion to llvm into Type class
[✓] Add easy way to add test cases to check compiler output
[✓] Add subs
[✓] Add generic command line options
    [✓] --help      Display available options
    [✓] --version   Show version information
    [✓] -v          Show verbose output
    [✓] -o <file>   Write output to <file>
    [✓] -O<number>  Set optimization level to <number>
    [✓] -m32        Generate 32bit i386 code
    [✓] -m64        Generate 64bit x86-64 code
    [✓] -S          Only compile. Emit assembly files
    [✓] -c          Compile and assemble. Emit object files
    [✓] -llvm       Emit llvm files


Todo for Milestone 2
======================
[✓] global variables
[✓] rework internal type system
    [✓] rename basic type to PrimitiveType
    [✓] add FLOAT and DOUBLE types
    [✓] add BOOL type
        [✓] add TRUE and FALSE keywords
    [✓] add unsigned types
    [✓] implement implicit type casting and conversions
[✓] Lex negative numbers
[✓] Lex simple floating point numbers
[✓] variadic function support
    external only. for printf
[✓] add basic escape codes \n \t
[✓] implement alias attribute
    [✓] add alias to Symbol
[✓] add IF keyword
    * no single liner variant
     ifStmt   = "IF" Expression "THEN"
                StmtList
                ( "ELSE" ( ifStmt | StmtList "END" "IF" )
                | "END" "IF"
                )
[✓] add BooleanExpression
    * only "=" and "<>"
[✓] add pointer dereferencing
    Dim argv As Byte Ptr Ptr
    Dim arg As Byte Ptr
    arg = *argv
[✓] Rename CodeGen to IrBuilder
[✓] Add Emitter
    [✓] assemble
    [✓] link
    [✓] produce binary


Todo for Milestone 1
======================
Simple full scale compiler
* reads input from input files
* compiles to llvm assembly
* links the final executable
* 2 data types: integer, byte
* pointers (byte ptr for strings)
* Attributes: alias, extern, lib
* line continuation with _

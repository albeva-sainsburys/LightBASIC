This grammar is closest possible approximation of teh lbc language.
In several instances (as commented below) the grammar as defines is ambigious,
but handled by the compiler

EBNF
------
Program         = { Declaration }
                .
Declaration     = [ "[" Attributes "]" ]
                ( VariableDecl
                | FunctionDecl
                | FunctionImpl
                | SubImpl
                )
                .
AttributeList   = Attribute { ","  Attribute }
                .
Attribute       = id [
                    ( "=" AttribParam
                    | "(" [ AttribParamList ] ")"
                    )
                ]
                .
AttribParamList = AttribParam { "," AttribParam }
                .
AttribParam     = IntegerLiteral
                | StringLiteral
                .
VariableDecl    = "DIM" id "AS" TypeExpr [ "=" Expression ]
                | "Var" id "=" Expression
                .
FunctionDecl    = "DECLARE" ( FunctionSignature | SubSignature )
                .
FuncSignature   = "FUNCTION" id [ "(" [ FuncParamList ] ")" ] "AS" TypeExpr
                .
SubSignature    = "SUB" [ "(" FuncParamList ")" ]
                .
FuncParamList   = FuncParam { "," FuncParam }
                .
FuncParam       = id "AS" TypeExpr
                .
TypeExpr        = ("INTEGER" | "BYTE") { "PTR" }
                .
FunctionImpl    = FuncSignature
                  StatementList
                  "END" "FUNCTION"
                .
SubImpl         = SubSignature
                  StatementList
                  "END" "SUB"
                .
StatementList   = { Statement }
                .
Statement       = VariableDecl
                | AssignStmt
                | CallStmt
                | ReturnStmt
                | IfStmt
                | ForStmt
                .
AssignStmt      = Expression "=" Expression
                .
CallStmt        = id
                ( "(" [ funcArgList ] ")"
                | [ funcArgList ] )
                .
ReturnStmt      = "RETURN" [ Expression ]
                .
IfStmt          = "IF" Expression "THEN"
                  StatementList
                  { "ELSE" "IF" Expression "THEN"
                    StatementList
                  }
                  [ "ELSE"
                    StatementList
                  ]
                  "END" "IF"
                .
ForStmt         = "FOR" ( id [ "AS" TypeExpr] | "VAR" id | Expression )
                  "=" Expression "TO" Expression [ "STEP" Expression ]
                  StatementList
                  "NEXT"
                .
Expression      = IntegerLiteral
                | FloatingPointLiteral
                | StringLiteral
                | CallExpr
                | id
                | AddressOf
                | Dereference
                | BinaryExpression      (. this is broken. will use a expression parser anyway. so ebnf won't work .)
                .
BinaryExpression= Expression Op Expression
                .
CallExpr        = id "(" [ funcArgList ] ")"
                .
funcArgList     = Expression { "," Expression }
                .
ReturnStmt      = "RETURN" Expression
                .
AddressOf         = "&" id
                .
Dereference       = "*" Expression
                .

Milestone 1
=============
Simple fullscale compiler
* reads input from input files
* compiles to llvm assembly
* links the final executable
* 2 data types: integer, byte
* pointers (byte ptr for strings)
* Attributes: alias, extern, lib
* line continuation with _


EBNF
------
Program         = { Declaration }
                .
Declaration     = [ "[" Attributes "]" ]
                ( VariableDecl
                | FunctionDecl
                | FunctionImpl
                )
                .
AttributeList   = Attribute { ","  Attribute }
                .
Attribute       = id [
                    ( "=" AttribParam
                    | "(" [ AttribParamList ] ")"
                    )
                ]
                .
AttribParamList = AttribParam { "," AttribParam }
                .
AttribParam     = IntegerLiteral
                | StringLiteral
                .
VariableDecl    = "DIM" id "AS" TypeExpr
                .
FunctionDecl    = "DECLARE" FunctionSignature
                .
FuncSignature   = "FUNCTION" id "(" [ FuncParamList ] ")" "AS" TypeExpr
                .
FuncParamList   = FuncParam { "," FuncParam }
                .
FuncParam       = id "AS" TypeExpr
                .
TypeExpr        = ("INTEGER" | "BYTE") { "PTR" }
                .
FunctionImpl    = FuncSignature
                  StatementList
                  "END" "FUNCTION"
                .
StatementList   = { Statement }
                .
Statement       = VariableDecl
                | AssignStmt
                | CallStmt
                | ReturnStmt
                .
AssignStmt      = Expression "=" Expression
                .
CallStmt        = CallExpr
                .
Expression      = IntegerLiteral
                | FloatingPointLiteral
                | StringLiteral
                | CallExpr
                | id
                | AddressOf
                | Dereference
                .
CallExpr        = id "(" [ funcArgList ] ")"
                .
funcArgList     = Expression { "," Expression }
                .
ReturnStmt      = "RETURN" Expression
                .
AddressOf         = "&" id
                .
Dereference       = "*" Expression
                .

Example
---------
' Declare puts from libc
[Alias = "puts", Lib = "libc", Extern = "C"] _
DECLARE FUNCTION puts(str AS BYTE PTR) AS INTEGER

' implement main function
FUNCTION main(argc AS INTEGER, argv AS BYTE PTR PTR) AS INTEGER
    DIM msg AS BYTE PTR
    msg = "Hello World"
    puts(msg)
END FUNCTION

